---
---

<!-- Chat Widget Flotante -->
<div id="chatWidget" class="chat-widget" style="display:none;">
  <div class="chat-header" onclick="toggleChat()">
    <div class="chat-icon"><i class="fab fa-telegram"></i></div>
    <div class="chat-title">
      <div>Asistente PDC</div>
      <div class="chat-status"><i class="fas fa-circle" style="color:#28ca42;"></i> En línea</div>
    </div>
    <div class="chat-toggle" id="chatToggle">−</div>
  </div>
  
  <div class="chat-body" id="chatBody">
    <div class="chat-messages" id="chatMessages">
      <div class="message bot-message">
        <div class="message-avatar"><i class="fas fa-robot"></i></div>
        <div class="message-content">
          <p>¡Hola! Soy el asistente de PDC. Te ayudo a conectar con nuestros especialistas.</p>
          <div class="message-time">Ahora</div>
        </div>
      </div>
      
      <div class="quick-options" id="quickOptions">
        <button onclick="startDataCollection('urgent')" class="quick-btn">
          <i class="fas fa-exclamation-triangle"></i> Consulta Urgente
        </button>
        <button onclick="startDataCollection('services')" class="quick-btn">
          <i class="fas fa-search"></i> Conocer Servicios
        </button>
        <button onclick="startDataCollection('pricing')" class="quick-btn">
          <i class="fas fa-dollar-sign"></i> Información de Precios
        </button>
        <button onclick="startDataCollection('specialist')" class="quick-btn">
          <i class="fas fa-user-tie"></i> Hablar con Especialista
        </button>
      </div>
    </div>
    
    <div class="chat-input-container">
      <input 
        type="text" 
        id="chatInput" 
        placeholder="Escribe tu mensaje..." 
        onkeypress="handleChatKeyPress(event)"
      >
      <button onclick="sendMessage()" class="send-btn"><i class="fas fa-paper-plane"></i></button>
    </div>
    
    <div class="chat-footer">
      <div style="font-size:0.8rem;color:var(--accent);text-align:center;">
        <i class="fas fa-lock"></i> Conversación segura • <i class="fas fa-bolt"></i> Respuesta inmediata
      </div>
    </div>
  </div>
</div>

<!-- Botón de Chat cuando está minimizado -->
<div id="chatButton" class="chat-button" onclick="openChat()">
  <div class="chat-button-icon"><i class="fab fa-telegram"></i></div>
  <div class="chat-notification" id="chatNotification" style="display:none;">1</div>
</div>

<style>
.chat-widget {
  position: fixed;
  bottom: 100px;
  right: 30px;
  width: 350px;
  max-height: 500px;
  background: linear-gradient(135deg, var(--surface) 0%, rgba(19, 19, 19, 0.95) 100%);
  border-radius: 20px;
  box-shadow: 0 20px 60px rgba(0,0,0,0.4);
  border: 2px solid var(--border);
  z-index: 9998;
  backdrop-filter: blur(20px);
  transition: all 0.3s ease;
  font-family: inherit;
}

.chat-header {
  background: linear-gradient(135deg, #0088cc 0%, #229ED9 100%);
  color: white;
  padding: 15px 20px;
  border-radius: 18px 18px 0 0;
  display: flex;
  align-items: center;
  gap: 12px;
  cursor: pointer;
  user-select: none;
}

.chat-icon {
  font-size: 1.5rem;
  filter: drop-shadow(0 0 8px rgba(255,255,255,0.3));
}

.chat-title {
  flex: 1;
}

.chat-title > div:first-child {
  font-weight: 600;
  font-size: 1rem;
}

.chat-status {
  font-size: 0.8rem;
  opacity: 0.9;
  margin-top: 2px;
}

.chat-toggle {
  font-size: 1.5rem;
  font-weight: bold;
  cursor: pointer;
  padding: 5px;
  border-radius: 50%;
  transition: all 0.3s ease;
}

.chat-toggle:hover {
  background: rgba(255,255,255,0.2);
}

.chat-body {
  display: flex;
  flex-direction: column;
  height: 400px;
  overflow: hidden;
}

.chat-messages {
  flex: 1;
  padding: 20px;
  overflow-y: auto;
  display: flex;
  flex-direction: column;
  gap: 15px;
}

.message {
  display: flex;
  gap: 10px;
  align-items: flex-start;
}

.message-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background: var(--accent);
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
  flex-shrink: 0;
  color: var(--background);
}

.message-content {
  background: var(--card);
  padding: 12px 15px;
  border-radius: 15px;
  border: 1px solid var(--border);
  max-width: 80%;
  position: relative;
}

.bot-message .message-content {
  background: linear-gradient(135deg, rgba(110, 122, 138, 0.1) 0%, rgba(178, 187, 200, 0.05) 100%);
}

.user-message {
  flex-direction: row-reverse;
}

.user-message .message-avatar {
  background: var(--accent-light);
}

.user-message .message-content {
  background: linear-gradient(135deg, var(--accent) 0%, var(--accent-light) 100%);
  color: var(--background);
}

.message-content p {
  margin: 0;
  color: var(--text);
  line-height: 1.4;
  font-size: 0.95rem;
}

.user-message .message-content p {
  color: var(--background);
}

.message-time {
  font-size: 0.75rem;
  color: var(--accent);
  margin-top: 5px;
  opacity: 0.8;
}

.user-message .message-time {
  color: rgba(255,255,255,0.8);
}

.quick-options {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 8px;
  margin-top: 15px;
}

.quick-btn {
  background: rgba(255,255,255,0.05);
  border: 1px solid var(--border);
  color: var(--text);
  padding: 8px 12px;
  border-radius: 10px;
  font-size: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: center;
}

.quick-btn:hover {
  background: var(--accent);
  color: var(--background);
  transform: translateY(-2px);
}

.chat-input-container {
  display: flex;
  padding: 15px 20px;
  gap: 10px;
  border-top: 1px solid var(--border);
  background: rgba(255,255,255,0.02);
}

.chat-input-container input {
  flex: 1;
  background: var(--card);
  border: 2px solid var(--border);
  color: var(--text);
  padding: 10px 15px;
  border-radius: 20px;
  font-size: 0.9rem;
  transition: all 0.3s ease;
}

.chat-input-container input:focus {
  outline: none;
  border-color: var(--accent);
  box-shadow: 0 0 0 3px rgba(110, 122, 138, 0.2);
}

.send-btn {
  background: linear-gradient(135deg, #0088cc 0%, #229ED9 100%);
  border: none;
  color: white;
  width: 40px;
  height: 40px;
  border-radius: 50%;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 1rem;
}

.send-btn:hover {
  transform: scale(1.1);
  box-shadow: 0 5px 15px rgba(0,0,0,0.3);
  background: linear-gradient(135deg, #229ED9 0%, #0088cc 100%);
}

.chat-footer {
  padding: 10px 20px;
  border-top: 1px solid var(--border);
  background: rgba(255,255,255,0.02);
}

.chat-button {
  position: fixed;
  bottom: 30px;
  right: 90px;
  width: 60px;
  height: 60px;
  background: linear-gradient(135deg, #0088cc 0%, #229ED9 100%);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  box-shadow: 0 10px 30px rgba(0,0,0,0.3);
  transition: all 0.3s ease;
  z-index: 9997;
  position: relative;
}

.chat-button:hover {
  transform: scale(1.1);
  box-shadow: 0 15px 40px rgba(0,0,0,0.4);
  background: linear-gradient(135deg, #229ED9 0%, #0088cc 100%);
}

.chat-button-icon {
  font-size: 1.8rem;
  color: white;
  filter: drop-shadow(0 0 8px rgba(255,255,255,0.3));
}

.chat-notification {
  position: absolute;
  top: -5px;
  right: -5px;
  background: #ff4757;
  color: white;
  width: 20px;
  height: 20px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.8rem;
  font-weight: bold;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0% { transform: scale(1); }
  50% { transform: scale(1.1); }
  100% { transform: scale(1); }
}

.chat-messages::-webkit-scrollbar {
  width: 6px;
}

.chat-messages::-webkit-scrollbar-track {
  background: transparent;
}

.chat-messages::-webkit-scrollbar-thumb {
  background: var(--border);
  border-radius: 3px;
}

.chat-messages::-webkit-scrollbar-thumb:hover {
  background: var(--accent);
}

@media (max-width: 768px) {
  .chat-widget {
    width: 300px;
    right: 20px;
    bottom: 80px;
  }
  
  .chat-button {
    width: 55px;
    height: 55px;
    right: 80px;
    bottom: 20px;
  }
  
  .chat-button-icon {
    font-size: 1.6rem;
  }
  
  .quick-options {
    grid-template-columns: 1fr;
  }
}
</style>

<script is:inline>
let chatOpen = false;
let messageCount = 0;
let currentStep = 'initial';
let userData = {};

// Servicios disponibles
const services = {
  antecedentes: {
    name: 'Verificación de Antecedentes',
    description: 'OSINT profundo, análisis de datos y reconstrucción de historial completo.',
    features: ['Análisis OSINT profundo', 'Mapeo de relaciones', 'Verificación legal', 'Análisis digital']
  },
  localizacion: {
    name: 'Localización de Personas',
    description: 'Rastreo digital avanzado y técnicas de campo especializadas.',
    features: ['Geolocalización avanzada', 'OSINT de redes sociales', 'Análisis predictivo', 'Red global de contactos']
  },
  vigilancia: {
    name: 'Vigilancia Especializada',
    description: 'Monitoreo discreto 24/7 físico y digital con evidencia legal.',
    features: ['Vigilancia física discreta', 'Monitoreo digital 24/7', 'Tecnología de observación', 'Reportes en tiempo real']
  },
  fraudes: {
    name: 'Investigación Anti-Fraude',
    description: 'Análisis especializado de siniestros y recolección de evidencia legal.',
    features: ['Investigación de siniestros', 'Evidencia digital', 'Análisis documental', 'Informes periciales']
  },
  corporativo: {
    name: 'Protección Corporativa',
    description: 'Due diligence, amenazas internas y protección de activos empresariales.',
    features: ['Análisis de amenazas', 'Protección corporativa', 'Due diligence avanzado', 'Compliance y auditoría']
  },
  domestico: {
    name: 'Casos Familiares',
    description: 'Infidelidad, custodia, cuidado de hijos y seguridad familiar.',
    features: ['Investigación de custodia', 'Casos de infidelidad', 'Localización de familiares', 'Protección de hijos']
  },
  ciberinteligencia: {
    name: 'Ciberinteligencia & OSINT',
    description: 'Herramientas ofensivas y defensivas de alta tecnología.',
    features: ['OSINT avanzado', 'Detección de amenazas', 'Herramientas ofensivas/defensivas', 'Análisis de amenazas']
  }
};

function toggleChat() {
  const chatBody = document.getElementById('chatBody');
  const chatToggle = document.getElementById('chatToggle');
  const chatWidget = document.getElementById('chatWidget');
  const chatButton = document.getElementById('chatButton');
  
  if (chatOpen) {
    chatBody.style.display = 'none';
    chatToggle.textContent = '+';
    chatWidget.style.display = 'none';
    chatButton.style.display = 'flex';
    chatOpen = false;
  } else {
    chatBody.style.display = 'flex';
    chatToggle.textContent = '−';
    chatOpen = true;
  }
}

function openChat() {
  const chatWidget = document.getElementById('chatWidget');
  const chatButton = document.getElementById('chatButton');
  const chatBody = document.getElementById('chatBody');
  const chatToggle = document.getElementById('chatToggle');
  const notification = document.getElementById('chatNotification');
  
  chatWidget.style.display = 'block';
  chatButton.style.display = 'none';
  chatBody.style.display = 'flex';
  chatToggle.textContent = '−';
  notification.style.display = 'none';
  chatOpen = true;
}

function startDataCollection(type) {
  // Ocultar opciones rápidas
  document.getElementById('quickOptions').style.display = 'none';
  
  currentStep = type;
  userData = { type: type };
  
  let response = '';
  
  switch(type) {
    case 'urgent':
      response = "Entiendo que es urgente. Para conectarte con nuestro equipo de respuesta inmediata, necesito algunos datos:\n\n¿Podrías contarme brevemente sobre tu situación?";
      break;
    case 'services':
      response = "Te explico nuestros servicios principales:\n\n" + 
                Object.keys(services).map(key => 
                  `• ${services[key].name}: ${services[key].description}`
                ).join('\n\n') + 
                "\n\n¿Cuál de estos servicios te interesa más?";
      break;
    case 'pricing':
      response = "Nuestros precios varían según la complejidad del caso. Para darte una cotización exacta, necesito conocer:\n\n1. ¿Qué tipo de investigación necesitas?\n2. ¿Cuál es la urgencia del caso?\n3. ¿Tienes algún detalle específico?";
      break;
    case 'specialist':
      response = "Te conectaré con un especialista. Para asignar al experto más adecuado, cuéntame:\n\n¿Qué tipo de caso necesitas resolver?";
      break;
  }
  
  addMessage(response, 'bot');
}

function sendMessage() {
  const input = document.getElementById('chatInput');
  const message = input.value.trim();
  
  if (!message) return;
  
  addMessage(message, 'user');
  input.value = '';
  
  // Procesar respuesta según el paso actual
  processUserResponse(message);
}

function processUserResponse(message) {
  userData.lastMessage = message;
  
  setTimeout(() => {
    let response = '';
    
    switch(currentStep) {
      case 'urgent':
        userData.situation = message;
        response = "Gracias por la información. He registrado tu caso como urgente.\n\n¿Cuál es tu nombre y número de contacto para que nuestro equipo te llame inmediatamente?";
        currentStep = 'contact_urgent';
        break;
        
      case 'services':
        userData.serviceInterest = message;
        response = "Perfecto. Para ese servicio, ¿podrías contarme más detalles sobre tu caso específico?";
        currentStep = 'service_details';
        break;
        
      case 'pricing':
        userData.pricingInfo = message;
        response = "Entendido. Con esa información puedo preparar una cotización. ¿Cuál es tu email para enviarte la propuesta detallada?";
        currentStep = 'contact_pricing';
        break;
        
      case 'specialist':
        userData.caseType = message;
        response = "Perfecto. ¿Cuál es tu nombre y email para que nuestro especialista te contacte en las próximas 2 horas?";
        currentStep = 'contact_specialist';
        break;
        
      case 'contact_urgent':
      case 'contact_pricing':
      case 'contact_specialist':
      case 'service_details':
        userData.contactInfo = message;
        sendToTelegram();
        response = "¡Excelente! He enviado toda tu información a nuestro equipo.\n\n✅ Recibirás respuesta en menos de 5 minutos\n🔒 Toda la información es confidencial\n📱 También puedes contactarnos directamente:\n\n• Telegram: @pdc_agency";
        currentStep = 'completed';
        break;
        
      default:
        response = "Gracias por tu mensaje. ¿En qué más puedo ayudarte?";
    }
    
    addMessage(response, 'bot');
  }, 1000);
}

function sendToTelegram() {
  // Preparar mensaje para Telegram
  let telegramMessage = `🔒 NUEVA CONSULTA - PDC\n\n`;
  telegramMessage += `📋 Tipo: ${userData.type}\n`;
  telegramMessage += `📝 Información:\n${JSON.stringify(userData, null, 2)}\n\n`;
  telegramMessage += `⏰ Fecha: ${new Date().toLocaleString('es-ES')}\n`;
  telegramMessage += `🌐 Origen: Chat Web`;
  
  // Enviar a Telegram (simulado - en producción usarías la API de Telegram)
  console.log('Enviando a Telegram:', telegramMessage);
  
  // También podrías enviar por email usando un servicio como EmailJS
  // o hacer una llamada a tu backend para procesar la información
}

function addMessage(text, sender) {
  const messagesContainer = document.getElementById('chatMessages');
  const messageDiv = document.createElement('div');
  messageDiv.className = `message ${sender}-message`;
  
  const now = new Date();
  const timeString = now.toLocaleTimeString('es-ES', { 
    hour: '2-digit', 
    minute: '2-digit' 
  });
  
  const avatar = sender === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>';
  
  messageDiv.innerHTML = `
    <div class="message-avatar">${avatar}</div>
    <div class="message-content">
      <p>${text}</p>
      <div class="message-time">${timeString}</div>
    </div>
  `;
  
  messagesContainer.appendChild(messageDiv);
  messagesContainer.scrollTop = messagesContainer.scrollHeight;
  
  // Show notification if chat is closed
  if (!chatOpen && sender === 'bot') {
    const notification = document.getElementById('chatNotification');
    messageCount++;
    notification.textContent = messageCount;
    notification.style.display = 'flex';
  }
}

function handleChatKeyPress(event) {
  if (event.key === 'Enter') {
    sendMessage();
  }
}
</script>